29/01/2021 - 00:06 

manoel@worknote:~/Workspaces/react/learnReact$ ls
createReactApp  fundamentos  my-app  README.md  tic-tac-toe
manoel@worknote:~/Workspaces/react/learnReact$ cd createReactApp/
manoel@worknote:~/Workspaces/react/learnReact/createReactApp$ ls
notes  NOTES.md
manoel@worknote:~/Workspaces/react/learnReact/createReactApp$ npm -v
6.13.6
manoel@worknote:~/Workspaces/react/learnReact/createReactApp$ npx

ERRO: Você deve suprir um comando.

Executa comandos de módulos npm.

  npx [opções] <comando>[@versão] [argumento-de-comando]...

  npx [opções] [-p|--package <pacote>]... <comando> [argumento-de-comando]...

  npx [opções] -c '<string-de-comando>'

  npx --shell-auto-fallback [terminal]


Opções:
  --package, -p          Pacote para ser instalado.                     [string]
  --cache                Localização da cache npm.                      [string]
  --always-spawn         Always spawn a child process to execute the command.
                                                                      [booleano]
  --no-install           Pular instalação se um pacote está faltando. [booleano]
  --userconfig           Localização do npmrc do usuário.               [string]
  --call, -c             Executa string como se estivesse dentro de `npm
                         run-script`.                                   [string]
  --shell, -s            Terminal para executar o comando, se tiver.
                                                        [string] [padrão: false]
  --shell-auto-fallback  Gera código de terminal para usar npx no lugar quando
                         comando não existir ("command not found").
                                    [string] [opções: "", "bash", "fish", "zsh"]
  --ignore-existing      Ignora comandos no $PATH ou no projeto atual. Isto
                         obriga npx a fazer uma instalação temporária e usar a
                         última versão.                               [booleano]
  --quiet, -q            Omitir resultado de npx. Sub-comandos não serão
                         afetados.                                    [booleano]
  --npm                  Comando npm usado para operações internas.
                                                               [string] [padrão:
  "/home/manoel/.nvm/versions/node/v13.7.0/lib/node_modules/npm/bin/npm-cli.js"]
  --node-arg, -n         Extra node argument when calling a node binary.[string]
  --version, -v          Exibe a versão                               [booleano]
  --help, -h             Exibe ajuda                                  [booleano]

Para documentação completa, veja a página do manual npx(1).

manoel@worknote:~/Workspaces/react/learnReact/createReactApp$ npx -v
6.13.6
manoel@worknote:~/Workspaces/react/learnReact/createReactApp$ createReactApp
createReactApp: comando não encontrado
manoel@worknote:~/Workspaces/react/learnReact/createReactApp$ npm -l createReactApp

Usage: npm <command>

where <command> is one of:

    access          npm access public [<package>]
                    npm access restricted [<package>]
                    npm access grant <read-only|read-write> <scope:team> [<package>]
                    npm access revoke <scope:team> [<package>]
                    npm access 2fa-required [<package>]
                    npm access 2fa-not-required [<package>]
                    npm access ls-packages [<user>|<scope>|<scope:team>]
                    npm access ls-collaborators [<package> [<user>]]
                    npm access edit [<package>]

    adduser         npm adduser [--registry=url] [--scope=@orgname] [--auth-type=legacy] [--always-auth]
                    
                    aliases: login, add-user

    audit           
                    npm audit [--json] [--production]
                    npm audit fix [--force|--package-lock-only|--dry-run|--production|--only=(dev|prod)]

    bin             npm bin [--global]

    bugs            npm bugs [<pkgname>]
                    
                    alias: issues

    cache           npm cache add <tarball file>
                    npm cache add <folder>
                    npm cache add <tarball url>
                    npm cache add <git url>
                    npm cache add <name>@<version>
                    npm cache clean
                    npm cache verify

    ci              npm ci

    completion      source <(npm completion)

    config          npm config set <key> <value>
                    npm config get [<key>]
                    npm config delete <key>
                    npm config list [--json]
                    npm config edit
                    npm set <key> <value>
                    npm get [<key>]
                    
                    alias: c

    dedupe          npm dedupe
                    
                    aliases: ddp, find-dupes

    deprecate       npm deprecate <pkg>[@<version>] <message>

    dist-tag        npm dist-tag add <pkg>@<version> [<tag>]
                    npm dist-tag rm <pkg> <tag>
                    npm dist-tag ls [<pkg>]
                    
                    alias: dist-tags

    docs            npm docs <pkgname>
                    npm docs .
                    
                    alias: home

    doctor          npm doctor

    edit            npm edit <pkg>[/<subpkg>...]

    explore         npm explore <pkg> [ -- <command>]

    fund            npm fund [--json]
                    
                    common options: npm fund [--browser] [[<@scope>/]<pkg>

    get             npm get <key> <value> (See `npm config`)

    help            

    help-search     npm help-search <text>

    hook            

    init            
                    npm init [--force|-f|--yes|-y|--scope]
                    npm init <@scope> (same as `npx <@scope>/create`)
                    npm init [<@scope>/]<name> (same as `npx [<@scope>/]create-<name>`)
                    
                    aliases: create, innit

    install         
                    npm install (with no args, in package dir)
                    npm install [<@scope>/]<pkg>
                    npm install [<@scope>/]<pkg>@<tag>
                    npm install [<@scope>/]<pkg>@<version>
                    npm install [<@scope>/]<pkg>@<version range>
                    npm install <alias>@npm:<name>
                    npm install <folder>
                    npm install <tarball file>
                    npm install <tarball url>
                    npm install <git:// url>
                    npm install <github username>/<github project>
                    
                    aliases: i, isntall, add
                    common options: [--save-prod|--save-dev|--save-optional] [--save-exact] [--no-save]

    install-ci-test 
                    npm install-ci-test [args]
                    Same args as `npm ci`
                    
                    alias: cit

    install-test    
                    npm install-test [args]
                    Same args as `npm install`
                    
                    alias: it

    link            npm link (in package dir)
                    npm link [<@scope>/]<pkg>[@<version>]
                    
                    alias: ln

    logout          npm logout [--registry=<url>] [--scope=<@scope>]

    ls              npm ls [[<@scope>/]<pkg> ...]
                    
                    aliases: list, la, ll

    org             npm org set orgname username [developer | admin | owner]
                    npm org rm orgname username
                    npm org ls orgname [<username>]

    outdated        npm outdated [[<@scope>/]<pkg> ...]

    owner           npm owner add <user> [<@scope>/]<pkg>
                    npm owner rm <user> [<@scope>/]<pkg>
                    npm owner ls [<@scope>/]<pkg>
                    
                    alias: author

    pack            npm pack [[<@scope>/]<pkg>...] [--dry-run]

    ping            npm ping
                    ping registry

    prefix          npm prefix [-g]

    profile         npm profile enable-2fa [auth-only|auth-and-writes]
                    npm profile disable-2fa
                    npm profile get [<key>]
                    npm profile set <key> <value>

    prune           npm prune [[<@scope>/]<pkg>...] [--production]

    publish         npm publish [<tarball>|<folder>] [--tag <tag>] [--access <public|restricted>] [--dry-run]
                    
                    Publishes '.' if no argument supplied
                    
                    Sets tag `latest` if no --tag specified

    rebuild         npm rebuild [[<@scope>/<name>]...]
                    
                    alias: rb

    repo            npm repo [<pkg>]

    restart         npm restart [-- <args>]

    root            npm root [-g]

    run-script      npm run-script <command> [-- <args>...]
                    
                    aliases: run, rum, urn

    search          npm search [--long] [search terms ...]
                    
                    aliases: s, se, find

    set             npm set <key> <value> (See `npm config`)

    shrinkwrap      npm shrinkwrap

    star            npm star [<pkg>...]
                    npm unstar [<pkg>...]
                    
                    alias: unstar

    stars           npm stars [<user>]

    start           npm start [-- <args>]

    stop            npm stop [-- <args>]

    team            npm team create <scope:team>
                    npm team destroy <scope:team>
                    npm team add <scope:team> <user>
                    npm team rm <scope:team> <user>
                    npm team ls <scope>|<scope:team>
                    npm team edit <scope:team>

    test            npm test [-- <args>]
                    
                    aliases: tst, t

    token           npm token list
                    npm token revoke <tokenKey>
                    npm token create [--read-only] [--cidr=list]
                    

    uninstall       npm uninstall [<@scope>/]<pkg>[@<version>]... [--save-prod|--save-dev|--save-optional] [--no-save]
                    
                    aliases: un, unlink, remove, rm, r

    unpublish       

    update          npm update [-g] [<pkg>...]
                    
                    aliases: up, upgrade, udpate

    version         npm version [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease [--preid=<prerelease-id>] | from-git]
                    (run in package dir)
                    'npm -v' or 'npm --version' to print npm version (6.13.6)
                    'npm view <pkg> version' to view a package's published version
                    'npm ls' to inspect current package/dependency versions

    view            npm view [<@scope>/]<pkg>[@<version>] [<field>[.subfield]...]
                    
                    aliases: v, info, show

    whoami          npm whoami [--registry <registry>]
                    (just prints username according to given registry)

npm <command> -h  quick help on <command>
npm -l            display full usage info
npm help <term>   search for help on <term>
npm help npm      involved overview

Specify configs in the ini-formatted file:
    /home/manoel/.npmrc
or on the command line via: npm <command> --key value
Config info can be viewed via: npm help config

npm@6.13.6 /home/manoel/.nvm/versions/node/v13.7.0/lib/node_modules/npm

manoel@worknote:~/Workspaces/react/learnReact/createReactApp$ npm uninstall -g createReactApp
up to date in 0.285s
manoel@worknote:~/Workspaces/react/learnReact/createReactApp$ npx createReactApp my-app
npm ERR! code E404
npm ERR! 404 Not Found - GET https://registry.npmjs.org/createReactApp - Not found
npm ERR! 404 
npm ERR! 404  'createReactApp@latest' is not in the npm registry.
npm ERR! 404 Your package name is not valid, because 
npm ERR! 404  1. name can no longer contain capital letters
npm ERR! 404 
npm ERR! 404 Note that you can also install from a
npm ERR! 404 tarball, folder, http url, or git url.

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/manoel/.npm/_logs/2021-01-29T02_55_25_842Z-debug.log
Instalação de [ 'createReactApp@latest' ] falhou com código 1
manoel@worknote:~/Workspaces/react/learnReact/createReactApp$ npx create-react-app my-app
npx: instalou 67 em 9.704s

Creating a new React app in /home/manoel/Workspaces/react/learnReact/createReactApp/my-app.

Installing packages. This might take a couple of minutes.
Installing react, react-dom, and react-scripts with cra-template...

yarn add v1.22.10
[1/4] Resolving packages...
[2/4] Fetching packages...
error postcss@8.1.9: The engine "node" is incompatible with this module. Expected version "^10 || ^12 || >=14". Got "13.7.0"
error Found incompatible module.
info Visit https://yarnpkg.com/en/docs/cli/add for documentation about this command.

Aborting installation.
  yarnpkg add --exact react react-dom react-scripts cra-template --cwd /home/manoel/Workspaces/react/learnReact/createReactApp/my-app has failed.

Deleting generated file... package.json
Deleting generated file... yarn.lock
Deleting my-app/ from /home/manoel/Workspaces/react/learnReact/createReactApp
Done.
manoel@worknote:~/Workspaces/react/learnReact/createReactApp$ nvm

Node Version Manager (v0.35.2)

Note: <version> refers to any version-like string nvm understands. This includes:
  - full or partial version numbers, starting with an optional "v" (0.10, v0.1.2, v1)
  - default (built-in) aliases: node, stable, unstable, iojs, system
  - custom aliases you define with `nvm alias foo`

 Any options that produce colorized output should respect the `--no-colors` option.

Usage:
  nvm --help                                Show this message
  nvm --version                             Print out the installed version of nvm
  nvm install [-s] <version>                Download and install a <version>, [-s] from source. Uses .nvmrc if available
    --reinstall-packages-from=<version>     When installing, reinstall packages installed in <node|iojs|node version number>
    --lts                                   When installing, only select from LTS (long-term support) versions
    --lts=<LTS name>                        When installing, only select from versions for a specific LTS line
    --skip-default-packages                 When installing, skip the default-packages file if it exists
    --latest-npm                            After installing, attempt to upgrade to the latest working npm on the given node version
    --no-progress                           Disable the progress bar on any downloads
  nvm uninstall <version>                   Uninstall a version
  nvm uninstall --lts                       Uninstall using automatic LTS (long-term support) alias `lts/*`, if available.
  nvm uninstall --lts=<LTS name>            Uninstall using automatic alias for provided LTS line, if available.
  nvm use [--silent] <version>              Modify PATH to use <version>. Uses .nvmrc if available
    --lts                                   Uses automatic LTS (long-term support) alias `lts/*`, if available.
    --lts=<LTS name>                        Uses automatic alias for provided LTS line, if available.
  nvm exec [--silent] <version> [<command>] Run <command> on <version>. Uses .nvmrc if available
    --lts                                   Uses automatic LTS (long-term support) alias `lts/*`, if available.
    --lts=<LTS name>                        Uses automatic alias for provided LTS line, if available.
  nvm run [--silent] <version> [<args>]     Run `node` on <version> with <args> as arguments. Uses .nvmrc if available
    --lts                                   Uses automatic LTS (long-term support) alias `lts/*`, if available.
    --lts=<LTS name>                        Uses automatic alias for provided LTS line, if available.
  nvm current                               Display currently activated version of Node
  nvm ls [<version>]                        List installed versions, matching a given <version> if provided
    --no-colors                             Suppress colored output
    --no-alias                              Suppress `nvm alias` output
  nvm ls-remote [<version>]                 List remote versions available for install, matching a given <version> if provided
    --lts                                   When listing, only show LTS (long-term support) versions
    --lts=<LTS name>                        When listing, only show versions for a specific LTS line
    --no-colors                             Suppress colored output
  nvm version <version>                     Resolve the given description to a single local version
  nvm version-remote <version>              Resolve the given description to a single remote version
    --lts                                   When listing, only select from LTS (long-term support) versions
    --lts=<LTS name>                        When listing, only select from versions for a specific LTS line
  nvm deactivate                            Undo effects of `nvm` on current shell
  nvm alias [<pattern>]                     Show all aliases beginning with <pattern>
    --no-colors                             Suppress colored output
  nvm alias <name> <version>                Set an alias named <name> pointing to <version>
  nvm unalias <name>                        Deletes the alias named <name>
  nvm install-latest-npm                    Attempt to upgrade to the latest working `npm` on the current node version
  nvm reinstall-packages <version>          Reinstall global `npm` packages contained in <version> to current version
  nvm unload                                Unload `nvm` from shell
  nvm which [current | <version>]           Display path to installed node version. Uses .nvmrc if available
  nvm cache dir                             Display path to the cache directory for nvm
  nvm cache clear                           Empty cache directory for nvm

Example:
  nvm install 8.0.0                     Install a specific version number
  nvm use 8.0                           Use the latest available 8.0.x release
  nvm run 6.10.3 app.js                 Run app.js using node 6.10.3
  nvm exec 4.8.3 node app.js            Run `node app.js` with the PATH pointing to node 4.8.3
  nvm alias default 8.1.0               Set default node version on a shell
  nvm alias default node                Always default to the latest available node version on a shell

Note:
  to remove, delete, or uninstall nvm - just remove the `$NVM_DIR` folder (usually `~/.nvm`)

manoel@worknote:~/Workspaces/react/learnReact/createReactApp$ nvm

Node Version Manager (v0.35.2)

Note: <version> refers to any version-like string nvm understands. This includes:
  - full or partial version numbers, starting with an optional "v" (0.10, v0.1.2, v1)
  - default (built-in) aliases: node, stable, unstable, iojs, system
  - custom aliases you define with `nvm alias foo`

 Any options that produce colorized output should respect the `--no-colors` option.

Usage:
  nvm --help                                Show this message
  nvm --version                             Print out the installed version of nvm
  nvm install [-s] <version>                Download and install a <version>, [-s] from source. Uses .nvmrc if available
    --reinstall-packages-from=<version>     When installing, reinstall packages installed in <node|iojs|node version number>
    --lts                                   When installing, only select from LTS (long-term support) versions
    --lts=<LTS name>                        When installing, only select from versions for a specific LTS line
    --skip-default-packages                 When installing, skip the default-packages file if it exists
    --latest-npm                            After installing, attempt to upgrade to the latest working npm on the given node version
    --no-progress                           Disable the progress bar on any downloads
  nvm uninstall <version>                   Uninstall a version
  nvm uninstall --lts                       Uninstall using automatic LTS (long-term support) alias `lts/*`, if available.
  nvm uninstall --lts=<LTS name>            Uninstall using automatic alias for provided LTS line, if available.
  nvm use [--silent] <version>              Modify PATH to use <version>. Uses .nvmrc if available
    --lts                                   Uses automatic LTS (long-term support) alias `lts/*`, if available.
    --lts=<LTS name>                        Uses automatic alias for provided LTS line, if available.
  nvm exec [--silent] <version> [<command>] Run <command> on <version>. Uses .nvmrc if available
    --lts                                   Uses automatic LTS (long-term support) alias `lts/*`, if available.
    --lts=<LTS name>                        Uses automatic alias for provided LTS line, if available.
  nvm run [--silent] <version> [<args>]     Run `node` on <version> with <args> as arguments. Uses .nvmrc if available
    --lts                                   Uses automatic LTS (long-term support) alias `lts/*`, if available.
    --lts=<LTS name>                        Uses automatic alias for provided LTS line, if available.
  nvm current                               Display currently activated version of Node
  nvm ls [<version>]                        List installed versions, matching a given <version> if provided
    --no-colors                             Suppress colored output
    --no-alias                              Suppress `nvm alias` output
  nvm ls-remote [<version>]                 List remote versions available for install, matching a given <version> if provided
    --lts                                   When listing, only show LTS (long-term support) versions
    --lts=<LTS name>                        When listing, only show versions for a specific LTS line
    --no-colors                             Suppress colored output
  nvm version <version>                     Resolve the given description to a single local version
  nvm version-remote <version>              Resolve the given description to a single remote version
    --lts                                   When listing, only select from LTS (long-term support) versions
    --lts=<LTS name>                        When listing, only select from versions for a specific LTS line
  nvm deactivate                            Undo effects of `nvm` on current shell
  nvm alias [<pattern>]                     Show all aliases beginning with <pattern>
    --no-colors                             Suppress colored output
  nvm alias <name> <version>                Set an alias named <name> pointing to <version>
  nvm unalias <name>                        Deletes the alias named <name>
  nvm install-latest-npm                    Attempt to upgrade to the latest working `npm` on the current node version
  nvm reinstall-packages <version>          Reinstall global `npm` packages contained in <version> to current version
  nvm unload                                Unload `nvm` from shell
  nvm which [current | <version>]           Display path to installed node version. Uses .nvmrc if available
  nvm cache dir                             Display path to the cache directory for nvm
  nvm cache clear                           Empty cache directory for nvm

Example:
  nvm install 8.0.0                     Install a specific version number
  nvm use 8.0                           Use the latest available 8.0.x release
  nvm run 6.10.3 app.js                 Run app.js using node 6.10.3
  nvm exec 4.8.3 node app.js            Run `node app.js` with the PATH pointing to node 4.8.3
  nvm alias default 8.1.0               Set default node version on a shell
  nvm alias default node                Always default to the latest available node version on a shell

Note:
  to remove, delete, or uninstall nvm - just remove the `$NVM_DIR` folder (usually `~/.nvm`)

manoel@worknote:~/Workspaces/react/learnReact/createReactApp$ nvm --lts

Node Version Manager (v0.35.2)

Note: <version> refers to any version-like string nvm understands. This includes:
  - full or partial version numbers, starting with an optional "v" (0.10, v0.1.2, v1)
  - default (built-in) aliases: node, stable, unstable, iojs, system
  - custom aliases you define with `nvm alias foo`

 Any options that produce colorized output should respect the `--no-colors` option.

Usage:
  nvm --help                                Show this message
  nvm --version                             Print out the installed version of nvm
  nvm install [-s] <version>                Download and install a <version>, [-s] from source. Uses .nvmrc if available
    --reinstall-packages-from=<version>     When installing, reinstall packages installed in <node|iojs|node version number>
    --lts                                   When installing, only select from LTS (long-term support) versions
    --lts=<LTS name>                        When installing, only select from versions for a specific LTS line
    --skip-default-packages                 When installing, skip the default-packages file if it exists
    --latest-npm                            After installing, attempt to upgrade to the latest working npm on the given node version
    --no-progress                           Disable the progress bar on any downloads
  nvm uninstall <version>                   Uninstall a version
  nvm uninstall --lts                       Uninstall using automatic LTS (long-term support) alias `lts/*`, if available.
  nvm uninstall --lts=<LTS name>            Uninstall using automatic alias for provided LTS line, if available.
  nvm use [--silent] <version>              Modify PATH to use <version>. Uses .nvmrc if available
    --lts                                   Uses automatic LTS (long-term support) alias `lts/*`, if available.
    --lts=<LTS name>                        Uses automatic alias for provided LTS line, if available.
  nvm exec [--silent] <version> [<command>] Run <command> on <version>. Uses .nvmrc if available
    --lts                                   Uses automatic LTS (long-term support) alias `lts/*`, if available.
    --lts=<LTS name>                        Uses automatic alias for provided LTS line, if available.
  nvm run [--silent] <version> [<args>]     Run `node` on <version> with <args> as arguments. Uses .nvmrc if available
    --lts                                   Uses automatic LTS (long-term support) alias `lts/*`, if available.
    --lts=<LTS name>                        Uses automatic alias for provided LTS line, if available.
  nvm current                               Display currently activated version of Node
  nvm ls [<version>]                        List installed versions, matching a given <version> if provided
    --no-colors                             Suppress colored output
    --no-alias                              Suppress `nvm alias` output
  nvm ls-remote [<version>]                 List remote versions available for install, matching a given <version> if provided
    --lts                                   When listing, only show LTS (long-term support) versions
    --lts=<LTS name>                        When listing, only show versions for a specific LTS line
    --no-colors                             Suppress colored output
  nvm version <version>                     Resolve the given description to a single local version
  nvm version-remote <version>              Resolve the given description to a single remote version
    --lts                                   When listing, only select from LTS (long-term support) versions
    --lts=<LTS name>                        When listing, only select from versions for a specific LTS line
  nvm deactivate                            Undo effects of `nvm` on current shell
  nvm alias [<pattern>]                     Show all aliases beginning with <pattern>
    --no-colors                             Suppress colored output
  nvm alias <name> <version>                Set an alias named <name> pointing to <version>
  nvm unalias <name>                        Deletes the alias named <name>
  nvm install-latest-npm                    Attempt to upgrade to the latest working `npm` on the current node version
  nvm reinstall-packages <version>          Reinstall global `npm` packages contained in <version> to current version
  nvm unload                                Unload `nvm` from shell
  nvm which [current | <version>]           Display path to installed node version. Uses .nvmrc if available
  nvm cache dir                             Display path to the cache directory for nvm
  nvm cache clear                           Empty cache directory for nvm

Example:
  nvm install 8.0.0                     Install a specific version number
  nvm use 8.0                           Use the latest available 8.0.x release
  nvm run 6.10.3 app.js                 Run app.js using node 6.10.3
  nvm exec 4.8.3 node app.js            Run `node app.js` with the PATH pointing to node 4.8.3
  nvm alias default 8.1.0               Set default node version on a shell
  nvm alias default node                Always default to the latest available node version on a shell

Note:
  to remove, delete, or uninstall nvm - just remove the `$NVM_DIR` folder (usually `~/.nvm`)

manoel@worknote:~/Workspaces/react/learnReact/createReactApp$ 
manoel@worknote:~/Workspaces/react/learnReact/createReactApp$ nvm ls
->      v13.7.0
       v14.15.4
         system
default -> 13.7.0 (-> v13.7.0)
node -> stable (-> v14.15.4) (default)
stable -> 14.15 (-> v14.15.4) (default)
iojs -> N/A (default)
unstable -> N/A (default)
lts/* -> lts/fermium (-> v14.15.4)
lts/argon -> v4.9.1 (-> N/A)
lts/boron -> v6.17.1 (-> N/A)
lts/carbon -> v8.17.0 (-> N/A)
lts/dubnium -> v10.23.1 (-> N/A)
lts/erbium -> v12.20.1 (-> N/A)
lts/fermium -> v14.15.4
manoel@worknote:~/Workspaces/react/learnReact/createReactApp$ nvm use 14.15.4
Now using node v14.15.4 (npm v6.14.10)
manoel@worknote:~/Workspaces/react/learnReact/createReactApp$ npx create-react-app my-app
npx: instalou 67 em 7.567s

Creating a new React app in /home/manoel/Workspaces/react/learnReact/createReactApp/my-app.

Installing packages. This might take a couple of minutes.
Installing react, react-dom, and react-scripts with cra-template...


> core-js@2.6.12 postinstall /home/manoel/Workspaces/react/learnReact/createReactApp/my-app/node_modules/babel-runtime/node_modules/core-js
> node -e "try{require('./postinstall')}catch(e){}"


> core-js@3.8.3 postinstall /home/manoel/Workspaces/react/learnReact/createReactApp/my-app/node_modules/core-js
> node -e "try{require('./postinstall')}catch(e){}"


> core-js-pure@3.8.3 postinstall /home/manoel/Workspaces/react/learnReact/createReactApp/my-app/node_modules/core-js-pure
> node -e "try{require('./postinstall')}catch(e){}"


> ejs@2.7.4 postinstall /home/manoel/Workspaces/react/learnReact/createReactApp/my-app/node_modules/ejs
> node ./postinstall.js

+ cra-template@1.1.1
+ react@17.0.1
+ react-dom@17.0.1
+ react-scripts@4.0.1
added 1901 packages from 722 contributors and audited 1904 packages in 131.955s

126 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities


Installing template dependencies using npm...
npm WARN tsutils@3.20.0 requires a peer of typescript@>=2.8.0 || >= 3.2.0-dev || >= 3.3.0-dev || >= 3.4.0-dev || >= 3.5.0-dev || >= 3.6.0-dev || >= 3.6.0-beta || >= 3.7.0-dev || >= 3.7.0-beta but none is installed. You must install peer dependencies yourself.
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.1 (node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.1: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules/watchpack-chokidar2/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules/webpack-dev-server/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ @testing-library/jest-dom@5.11.9
+ web-vitals@0.2.4
+ @testing-library/react@11.2.3
+ @testing-library/user-event@12.6.2
added 29 packages from 78 contributors and audited 1933 packages in 20.264s

126 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

Removing template package using npm...

npm WARN tsutils@3.20.0 requires a peer of typescript@>=2.8.0 || >= 3.2.0-dev || >= 3.3.0-dev || >= 3.4.0-dev || >= 3.5.0-dev || >= 3.6.0-dev || >= 3.6.0-beta || >= 3.7.0-dev || >= 3.7.0-beta but none is installed. You must install peer dependencies yourself.
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.1 (node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.1: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules/webpack-dev-server/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules/watchpack-chokidar2/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

removed 1 package and audited 1932 packages in 12.128s

126 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities


Success! Created my-app at /home/manoel/Workspaces/react/learnReact/createReactApp/my-app
Inside that directory, you can run several commands:

  npm start
    Starts the development server.

  npm run build
    Bundles the app into static files for production.

  npm test
    Starts the test runner.

  npm run eject
    Removes this tool and copies build dependencies, configuration files
    and scripts into the app directory. If you do this, you can’t go back!

We suggest that you begin by typing:

  cd my-app
  npm start

Happy hacking!
manoel@worknote:~/Workspaces/react/learnReact/createReactApp$ 

